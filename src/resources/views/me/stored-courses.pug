
extends ../layouts/main.pug
mixin sortable(field, sort)
    -const sortType = field === sort.column ? sort.type : 'default'
    - const icons = { default: 'bi bi-arrow-down-up', asc: 'bi bi-sort-down', desc: 'bi bi-sort-up'}
    - const types = { default: 'desc', asc: 'desc', desc: 'asc'}
    - const icon = icons[sortType]
    - const type = types[sortType]
    a(href=`?_sort&column=${field}&type=${type}`) 
        span(class = `${icon}`)
block content
    form.container(name='container-form' method='POST' action='/user/handle-form-action')
        h3 Users
        a(href="/me/trash/courses") Bin 
            ='('+countDelete+')'
        .mt-5.d-flex.flex-row.align-items-center
            .form-check.me-3
                input#check-all.form-check-input(type='checkbox' value='')
                label.form-check-label(for='flexCheckDefault')
                    |Check All
            select.form-select.select-all-options.me-3(aria-label='Default select example' name="action" required)
                option(value='') ---Select service---
                option(value='delete') Delete
                
            button.btn.btn-primary.btn-sm.btn-check-all(disabled) Submit
        table.table.mt-5
            thead
                tr
                td 
                th(scope='col') #
                th(scope='col')
                    | User Name
                    +sortable('name', _sort)
                th(scope='col')
                    | Info
                    +sortable('info', _sort)
                th(scope='col') Time create
                th
            tbody
                each user,index in users
                    tr
                    td 
                        input.form-check-input(type='checkbox' name='userId[]' value=user._id)
                    th(scope='row')=index+1
                    td=user.name
                    td=user.info
                    td=user.createdAt
                    td 
                        a.btn.btn-link(href='/user/'+user._id+'/edit') Update
                        a.btn.btn-link(href='' data-bs-toggle="modal" data-bs-target="#delete-user" data-id=user._id) Delete
                        #delete-user.modal.fade(tabindex='-1' aria-labelledby='exampleModalLabel' aria-hidden='true')
                            .modal-dialog
                                .modal-content
                                    .modal-header
                                        h5#exampleModalLabel.modal-title Delete User?
                                        button.btn-close(type='button' data-bs-dismiss='modal' aria-label='Close')
                                    .modal-body Do you want to delete this user?
                                    .modal-footer
                                        button.btn.btn-secondary(type='button' data-bs-dismiss='modal') Close
                                        button#btn-delete-user.btn.btn-danger(type='button') Delete
                else 
                    tr 
                        td.text-center(colspan="5") You don't create user ...
                            a(href="/user/create") Create new user
                form(method='POST' action='' name='delete-user-form')
                script.
                    var exampleModal = document.getElementById('delete-user')
                    var userId;
                    var deleteForm = document.forms["delete-user-form"]
                    var userItemCheckBoxs = document.querySelectorAll('input[name="userId[]"]')
                    var checkAllSubmitBtn = document.querySelector('.btn-check-all')
                    var containerForm = document.querySelector('form[name=container-form]')
                    var checkBoxAll = document.querySelector('#check-all')
                    var btnDeleteUser = document.getElementById('btn-delete-user')
                    exampleModal.addEventListener('show.bs.modal', function (event) {
                        var button = event.relatedTarget
                        userId = button.getAttribute('data-id')
                        
                    })
                
                     btnDeleteUser.onclick = function(){
                            deleteForm.action = '/user/'+userId+'?_method=DELETE'
                            deleteForm.submit();
                    }
                    //- When check box all click
                    checkBoxAll.onchange = function(e)
                    {
                            userItemCheckBoxs.forEach(userItemCheckBox => {
                                userItemCheckBox.checked = checkBoxAll.checked;
                            })
                            renderChechAllSubmitBtn()
                    }
                    userItemCheckBoxs.forEach(userItemCheckBox => {
                        userItemCheckBox.onchange = () => {
                        var isCheckAll = userItemCheckBoxs.length === document.querySelectorAll('input[name="userId[]"]:checked').length;
                        checkBoxAll.checked = isCheckAll;
                        renderChechAllSubmitBtn()
                        }
                    })
                    //- Re-render
                    function renderChechAllSubmitBtn() {
                        var checkedCount = document.querySelectorAll('input[name="userId[]"]:checked').length;
                        if(checkedCount){
                           checkAllSubmitBtn.removeAttribute('disabled')
                        }
                        else{
                            checkAllSubmitBtn.setAttribute('disabled',true)


                        }
                    }
                    //- checked all btn clicked
                    //-  containerForm.on('submit', function(e)
                    //-  {
                    //-      var isSubmitable = checkAllSubmitBtn.classList.contains('disabled')
                    //-     if(isSubmitable){
                    //-        e.preventDefault();
                    //-     }
                    //-  })
                    
                   
block more_content